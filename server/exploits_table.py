from flask import Blueprint, request
import subprocess
import os
import json
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment

exploits_table_routes = Blueprint("exploits_table", __name__)


@exploits_table_routes.route("/make-exploits-table", methods=["POST"])
def make_table():
    if "file" not in request.files:
        return "No file uploaded", 400

    file = request.files["file"]
    if file.filename == "":
        return "No file selected", 400

    filename = "ExploitsTable"
    file_path = os.path.join(os.path.dirname(__file__), "uploads", filename + ".pdf")
    file.save(file_path)

    output_file_cve = os.path.join(
        os.path.dirname(__file__), "output", "exploits_table", "CveList.txt"
    )
    output_file_exploits_temp = os.path.join(
        os.path.dirname(__file__), "output", "exploits_table", "ExploitsTableTemp.json"
    )
    output_file_excel = os.path.join(
        os.path.dirname(__file__), "output", "exploits_table", "ExploitsTable.xlsx"
    )

    extract_cve_command = f"pdfgrep '[0-9]{{4}}-[0-9]{{4,7}}' '{file_path}' | sed -r 's/^.*([0-9]{{4}}-[0-9]{{4,7}}).*$/\\1/g' | sort | uniq >> '{output_file_cve}'"
    subprocess.run(extract_cve_command, shell=True)

    cve_list = []
    with open(output_file_cve, "r") as cve_file:
        cve_list = cve_file.read().splitlines()

    exploits_data = []
    for cve in cve_list:
        search_exploit_command = (
            f"searchsploit --cve {cve} -j > '{output_file_exploits_temp}'"
        )
        subprocess.run(search_exploit_command, shell=True)
        with open(output_file_exploits_temp) as exploits_file:
            expl_j_data = json.load(exploits_file)
            cve_data = {}
            cve_data[cve] = expl_j_data["RESULTS_EXPLOIT"]
            exploits_data.append(cve_data)

    create_excel_table(exploits_data, output_file_excel)
    download_link = request.host_url + f"download/{filename}"
    return {"downloadLink": download_link}


def check_cve_kev(cve):
    with open(os.path.join("info", "kev.json")) as kev_file:
        kev_data = json.load(kev_file)
        vulnerabilities = kev_data.get("vulnerabilities", [])
        for vulnerability in vulnerabilities:
            if cve in vulnerability.get("cveID"):
                return True
        return False


def create_excel_table(exploits_data, output_file):
    wb = Workbook()
    ws = wb.active
    ws.title = "Exploit-db"

    headers = ["â„–", "CVE Code", "Title", "EDB-ID", "Type", "Platform", "URL", "KEV"]
    ws.append(headers)

    bold_font_header = Font(bold=True, size=13)
    for cell in ws[1]:
        cell.font = bold_font_header
        cell.alignment = Alignment(horizontal="center")

    row_number = 0
    for exploit in exploits_data:
        for cve, results in exploit.items():
            if results:
                row_number += 1
                for result in results:
                    kev_present = check_cve_kev(cve)
                    row = [
                        row_number,
                        cve,
                        result.get("Title", ""),
                        result.get("EDB-ID", ""),
                        result.get("Type", ""),
                        result.get("Platform", ""),
                        f"https://www.exploit-db.com/exploits/{result.get('EDB-ID', '')}",
                        "+" if kev_present else "-",
                    ]
                    ws.append(row)

    for column in ws.columns:
        max_length = 0
        column_letter = column[0].column_letter
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = (max_length + 2) * 1.1
        ws.column_dimensions[column_letter].width = adjusted_width

        for cell in column:
            cell.alignment = Alignment(horizontal="center")
            if cell.row == 1:
                cell.font = bold_font_header
            else:
                cell.font = Font(size=13)

    wb.save(output_file)
